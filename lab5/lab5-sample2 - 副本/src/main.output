Terminals unused in grammar

   T_STRING
   BOOL
   LOP_EQ


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMICOLON
    5          | declaration SEMICOLON

    6 declaration: T IDENTIFIER LOP_ASSIGN expr
    7            | T IDENTIFIER

    8 expr: IDENTIFIER
    9     | INTEGER
   10     | CHAR
   11     | STRING

   12 T: T_INT
   13  | T_CHAR
   14  | T_BOOL


Terminals, with rules where they appear

$end (0) 0
error (256)
T_CHAR (258) 13
T_INT (259) 12
T_STRING (260)
T_BOOL (261) 14
LOP_ASSIGN (262) 6
SEMICOLON (263) 4 5
IDENTIFIER (264) 6 7 8
INTEGER (265) 9
CHAR (266) 10
BOOL (267)
STRING (268) 11
LOP_EQ (269)


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
program (16)
    on left: 1, on right: 0
statements (17)
    on left: 2 3, on right: 1 3
statement (18)
    on left: 4 5, on right: 2 3
declaration (19)
    on left: 6 7, on right: 5
expr (20)
    on left: 8 9 10 11, on right: 6
T (21)
    on left: 12 13 14, on right: 6 7


State 0

    0 $accept: . program $end

    T_CHAR     shift, and go to state 1
    T_INT      shift, and go to state 2
    T_BOOL     shift, and go to state 3
    SEMICOLON  shift, and go to state 4

    program      go to state 5
    statements   go to state 6
    statement    go to state 7
    declaration  go to state 8
    T            go to state 9


State 1

   13 T: T_CHAR .

    $default  reduce using rule 13 (T)


State 2

   12 T: T_INT .

    $default  reduce using rule 12 (T)


State 3

   14 T: T_BOOL .

    $default  reduce using rule 14 (T)


State 4

    4 statement: SEMICOLON .

    $default  reduce using rule 4 (statement)


State 5

    0 $accept: program . $end

    $end  shift, and go to state 10


State 6

    1 program: statements .
    3 statements: statements . statement

    T_CHAR     shift, and go to state 1
    T_INT      shift, and go to state 2
    T_BOOL     shift, and go to state 3
    SEMICOLON  shift, and go to state 4

    $default  reduce using rule 1 (program)

    statement    go to state 11
    declaration  go to state 8
    T            go to state 9


State 7

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 8

    5 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 12


State 9

    6 declaration: T . IDENTIFIER LOP_ASSIGN expr
    7            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 13


State 10

    0 $accept: program $end .

    $default  accept


State 11

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 12

    5 statement: declaration SEMICOLON .

    $default  reduce using rule 5 (statement)


State 13

    6 declaration: T IDENTIFIER . LOP_ASSIGN expr
    7            | T IDENTIFIER .

    LOP_ASSIGN  shift, and go to state 14

    $default  reduce using rule 7 (declaration)


State 14

    6 declaration: T IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18

    expr  go to state 19


State 15

    8 expr: IDENTIFIER .

    $default  reduce using rule 8 (expr)


State 16

    9 expr: INTEGER .

    $default  reduce using rule 9 (expr)


State 17

   10 expr: CHAR .

    $default  reduce using rule 10 (expr)


State 18

   11 expr: STRING .

    $default  reduce using rule 11 (expr)


State 19

    6 declaration: T IDENTIFIER LOP_ASSIGN expr .

    $default  reduce using rule 6 (declaration)
